//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ADMIN
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AirplaneEntities : DbContext
    {
        public static AirplaneEntities _context;
        public AirplaneEntities()
            : base("name=AirplaneEntities")
        {
        }

        public static AirplaneEntities GetContext()
        {
            if (_context == null)
                _context = new AirplaneEntities();
            return _context;
        }


        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Age> Ages { get; set; }
        public virtual DbSet<Airline> Airlines { get; set; }
        public virtual DbSet<Airplane> Airplanes { get; set; }
        public virtual DbSet<Airport> Airports { get; set; }
        public virtual DbSet<Class_ticket> Class_tickets { get; set; }
        public virtual DbSet<Flight> Flights { get; set; }
        public virtual DbSet<History_tickets> History_tickets { get; set; }
        public virtual DbSet<Passenger> Passengers { get; set; }
        public virtual DbSet<Regular_plane> Regular_planes { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<Ticket> Tickets { get; set; }
        public virtual DbSet<BUYER_TICKET> BUYER_TICKET { get; set; }
        public virtual DbSet<SCHEDULE> SCHEDULEs { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
    
        public virtual int BUY_TICKET(Nullable<System.DateTime> dEPATURE_DT, Nullable<System.DateTime> aRRIVAL_DT, string dEPATURE_NAME, string aRRIVAL_NAME, string nAME_AIRLINES, string cLASS, Nullable<bool> lUGGAGE, Nullable<int> pASSENGER, string rANGE)
        {
            var dEPATURE_DTParameter = dEPATURE_DT.HasValue ?
                new ObjectParameter("DEPATURE_DT", dEPATURE_DT) :
                new ObjectParameter("DEPATURE_DT", typeof(System.DateTime));
    
            var aRRIVAL_DTParameter = aRRIVAL_DT.HasValue ?
                new ObjectParameter("ARRIVAL_DT", aRRIVAL_DT) :
                new ObjectParameter("ARRIVAL_DT", typeof(System.DateTime));
    
            var dEPATURE_NAMEParameter = dEPATURE_NAME != null ?
                new ObjectParameter("DEPATURE_NAME", dEPATURE_NAME) :
                new ObjectParameter("DEPATURE_NAME", typeof(string));
    
            var aRRIVAL_NAMEParameter = aRRIVAL_NAME != null ?
                new ObjectParameter("ARRIVAL_NAME", aRRIVAL_NAME) :
                new ObjectParameter("ARRIVAL_NAME", typeof(string));
    
            var nAME_AIRLINESParameter = nAME_AIRLINES != null ?
                new ObjectParameter("NAME_AIRLINES", nAME_AIRLINES) :
                new ObjectParameter("NAME_AIRLINES", typeof(string));
    
            var cLASSParameter = cLASS != null ?
                new ObjectParameter("CLASS", cLASS) :
                new ObjectParameter("CLASS", typeof(string));
    
            var lUGGAGEParameter = lUGGAGE.HasValue ?
                new ObjectParameter("LUGGAGE", lUGGAGE) :
                new ObjectParameter("LUGGAGE", typeof(bool));
    
            var pASSENGERParameter = pASSENGER.HasValue ?
                new ObjectParameter("PASSENGER", pASSENGER) :
                new ObjectParameter("PASSENGER", typeof(int));
    
            var rANGEParameter = rANGE != null ?
                new ObjectParameter("RANGE", rANGE) :
                new ObjectParameter("RANGE", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BUY_TICKET", dEPATURE_DTParameter, aRRIVAL_DTParameter, dEPATURE_NAMEParameter, aRRIVAL_NAMEParameter, nAME_AIRLINESParameter, cLASSParameter, lUGGAGEParameter, pASSENGERParameter, rANGEParameter);
        }
    
        public virtual int DELETE_AGE(string rANGE)
        {
            var rANGEParameter = rANGE != null ?
                new ObjectParameter("RANGE", rANGE) :
                new ObjectParameter("RANGE", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DELETE_AGE", rANGEParameter);
        }
    
        public virtual int INSERT_AGE(Nullable<decimal> fACTOR_AGE, string rANGE)
        {
            var fACTOR_AGEParameter = fACTOR_AGE.HasValue ?
                new ObjectParameter("FACTOR_AGE", fACTOR_AGE) :
                new ObjectParameter("FACTOR_AGE", typeof(decimal));
    
            var rANGEParameter = rANGE != null ?
                new ObjectParameter("RANGE", rANGE) :
                new ObjectParameter("RANGE", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INSERT_AGE", fACTOR_AGEParameter, rANGEParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int UPDATE_AGE(Nullable<int> iD_AGE, Nullable<decimal> fACTOR_AGE, string rANGE)
        {
            var iD_AGEParameter = iD_AGE.HasValue ?
                new ObjectParameter("ID_AGE", iD_AGE) :
                new ObjectParameter("ID_AGE", typeof(int));
    
            var fACTOR_AGEParameter = fACTOR_AGE.HasValue ?
                new ObjectParameter("FACTOR_AGE", fACTOR_AGE) :
                new ObjectParameter("FACTOR_AGE", typeof(decimal));
    
            var rANGEParameter = rANGE != null ?
                new ObjectParameter("RANGE", rANGE) :
                new ObjectParameter("RANGE", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UPDATE_AGE", iD_AGEParameter, fACTOR_AGEParameter, rANGEParameter);
        }
    }
}
